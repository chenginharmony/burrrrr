import { useState, useCallback } from 'react';
import { supabase } from '../lib/supabase';

interface EventPool {
  total_amount: number;
  platform_fee: number;
  creator_fee: number;
  yes_pool: number;
  no_pool: number;
  entry_amount: number;
  updated_at: string;
}

export const useEventPool = () => {
  const [isLoading, setIsLoading] = useState(false);

  const updatePoolAmount = useCallback(async (
    eventId: string,
    amount: number,
    prediction: boolean
  ) => {
    setIsLoading(true);
    try {
      const { data: event, error: eventError } = await supabase
        .from('events')
        .select('creator_fee_percentage')
        .eq('id', eventId)
        .single();

      if (eventError) throw eventError;

      const { data: fees, error: feeError } = await supabase
        .rpc('calculate_pool_fees', {
          amount: amount,
          creator_fee_pct: event.creator_fee_percentage || 0
        });

      if (feeError) throw feeError;

      const { data: pool, error: fetchError } = await supabase
        .from('event_pools')
        .select('*')
        .eq('event_id', eventId)
        .single();

      if (fetchError) throw fetchError;

      const { error: updateError } = await supabase
        .from('event_pools')
        .update({
          total_amount: pool.total_amount + amount,
          platform_fee: pool.platform_fee + fees.platform_fee, // Use platform_fee consistently
          creator_fee: pool.creator_fee + fees.creator_fee,
          yes_pool: prediction ? pool.yes_pool + fees.net_amount : pool.yes_pool,
          no_pool: !prediction ? pool.no_pool + fees.net_amount : pool.no_pool,
          updated_at: new Date().toISOString()
        })
        .eq('event_id', eventId);

      if (updateError) throw updateError;
    } catch (error) {
      console.error('Error updating pool:', error);
      throw error;
    } finally {
      setIsLoading(false);
    }
  }, []);

  const getPoolInfo = useCallback(async (eventId: string): Promise<EventPool | null> => {
    try {
      const { data, error } = await supabase
        .from('event_pools')
        .select(`
          total_amount,
          platform_fee,
          creator_fee,
          yes_pool,
          no_pool,
          entry_amount,
          updated_at
        `)
        .eq('event_id', eventId)
        .single();

      if (error) throw error;
      return data;
    } catch (error) {
      console.error('Error fetching pool info:', error);
      return null;
    }
  }, []);

  return {
    updatePoolAmount,
    getPoolInfo,
    isLoading
  };
};